#!/bin/bash
# .bashrc
# Author: Clement Deltel <clement.deltel@proton.me>
# Source: https://github.com/clement-deltel/dotfiles/home/dot_bashrc.tmpl

#==============================================================================#
#               ------- Colors ------                                          #
#==============================================================================#
RED='\e[1;31m'
NC='\e[0m'

#==============================================================================#
#               ------- Configuration --------                                 #
#==============================================================================#

# If not running interactively, don't do anything
case $- in
  *i*) ;;
    *) return;;
esac

# Shell optional behavior
shopt -s autocd
shopt -s cdspell
shopt -s checkwinsize # check the window size after each command
shopt -s cmdhist
shopt -s histappend # append to the history file, don't overwrite it
shopt -s histreedit
shopt -s progcomp
shopt -s sourcepath

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
export HISTSIZE=999999
export HISTFILESIZE=999999

# Don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
export HISTCONTROL=ignoredups:ignorespace

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# Set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
  debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
  xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
  PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]$(pwd)\[\033[00m\] /> '
else
  PS1='${debian_chroot:+($debian_chroot)}\u@\h:$(pwd) /> '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
  PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
  ;;
*)
  ;;
esac

# Enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
  test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
  alias ls='ls --color=auto'
  #alias dir='dir --color=auto'
  #alias vdir='vdir --color=auto'

  alias grep='grep --color=auto'
  alias fgrep='fgrep --color=auto'
  alias egrep='egrep --color=auto'
fi

# Colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.
if [ -f ~/.bash_aliases ]; then
  . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

set -o ignoreeof    # Shell doesnt quit upon reading the end of file.
#set -o noclobber   # Prevents overwriting existing regular files
set -o notify       # Alerts the user upon background job termination
#set -o xtrace      # Prints out command arguments during execution
set -o vi           # Set vi mode for shell

# User specific environment and startup programs
export HOME=/home/${USER}
export PATH=${PATH}:${HOME}/.local/bin:${HOME}/bin

#==============================================================================#
#               ------- Functions ------                                       #
#==============================================================================#

# Print only column x of output
function col {
  awk -v col="$1" '{print $col}'
}

# Add extension $1 to all files without any extension in the current directory
function add-ext { find . -type f -not -name "*.*" -exec mv "{}" "{}"."$1" \;; }

# Create $2 copies of file $1
function cp-n { EXT="${1##*.}"; FILENAME="${1%.*}"; for i in $(seq 1 "$2"); do cp "$1" "${FILENAME}${i}.${EXT}"; done; }

# Execute $@ command in all the subdirectories
function exec-sub { find . -maxdepth 1 -mindepth 1 -type d -execdir echo {} \; -execdir $@ {} \; -execdir echo \;; }

# Make directory $1 and then cd inside
function mkcd { mkdir "$1"; cd "$1" || return; }

# Base64 decoding
function dec { echo "$1" | base64 --decode; }

# Host Info

# IP adresses
function my-ip(){
  MY_IP=$(/sbin/ifconfig eth0 | awk '/inet/ { print $2 } ' | sed -e s/addr://)
}

# Full summary
function ii() {
  echo -e "\nYou are logged on ${RED}$(hostname)"
  echo -e "\nAdditionnal information:$NC " ; uname -a
  echo -e "\n${RED}Users logged on:$NC " ; w -h
  echo -e "\n${RED}Current date :$NC " ; date
  echo -e "\n${RED}Machine stats :$NC " ; uptime
  echo -e "\n${RED}Memory stats :$NC " ; free
  my-ip 2>&- ;
  echo -e "\n${RED}Local IP Address :$NC" ; echo "${MY_IP:-"Not connected"}"
  echo
}

# Online cheatsheet
function cheatsheet { curl cheat.sh/"$1"; }

#==============================================================================#
#               ------- Aliases --------                                       #
#==============================================================================#

# Global
alias c='clear'
alias cls='clear'
alias d='date'
alias k='kill'
alias q='exit'
alias t='time'

# cd
alias home='cd ~'
alias ..='cd ..'
alias ...='cd ..; cd ..'
alias ....='cd ..; cd ..; cd ..'

# cp
alias cp='cp -i'

# du
alias du-sort='du -sh * | sort -h'

# env
alias env='clear && env | sort'

# exa
# if [ -x "$(command -v exa)" ]; then
#     alias ls="exa"
#     alias la="exa --long --all --group"
# fi

# grep
alias grep='grep --color=auto'

# history
alias h='clear && history | tail -50'

# ls
alias ll='ls -l --color=auto'
alias la='ls -Al --color=auto'
alias lah='ls -Ahl --color=auto'
alias lk='ls -lSr'          # sort by size
alias lr='ls -lR'           # recursive ls
alias ltr='ls -ltr'         # sort by date
alias lx='ls -lXB'          # sort by extension

# lsof - List open ports
alias lsop='lsof -i -n -P | grep LISTEN'

# mv
alias mv='mv -i'

# rm
alias rm='rm -i'

# su
alias root='sudo su -'
alias doc='sudo su - docker'

# tree
alias tree='tree -Csu'		# nice alternative to 'ls'

# vim
alias vimo='vim -o '

#==============================================================================#
#               ------- Aliases - AWS --------                                 #
#==============================================================================#
alias awslog='aws sso login'

#==============================================================================#
#               ------- Aliases - Typos --------                               #
#==============================================================================#
alias :q='exit'

#==============================================================================#
#               ------- Aliases - Bash --------                                #
#==============================================================================#
# bashrc
alias vib='vi ~/.bashrc'
alias srb='source ~/.bashrc'
alias cab='cat ~/.bashrc'

#==============================================================================#
#               ------- Functions & Aliases - Chezmoi ------                   #
#==============================================================================#
export EDITOR='code --wait'

function chezmoi-add-fn { chezmoi add "$1"; }
function chezmoi-add-template-fn { chezmoi add --template "$1"; }
function chezmoi-edit-fn { chezmoi edit "$1"; }
function chezmoi-fn { chezmoi "$@"; }

alias cm=chezmoi-fn
alias cma='chezmoi apply'
alias cmad=chezmoi-add-fn
alias cmadt=chezmoi-add-template-fn
alias cmaz='chezmoi apply && source ~/.zshrc'
alias cmcd='chezmoi cd'
alias cmd='chezmoi diff'
alias cme=chezmoi-edit-fn
alias cmo='code ~/.local/share/chezmoi'
alias cmtoml='code ~/.config/chezmoi/chezmoi.toml'

#==============================================================================#
#               ------- Functions & Aliases - Docker ------                    #
#==============================================================================#
function docker-exec-fn { docker exec -it "$1" "${2:-bash}"; }
function docker-fn { docker "$@"; }
function docker-image-rm-fn { docker image rm "$1"; }
function docker-image-rm-dangling-fn {
    IMGS=$(docker images --filter "dangling=true" -q --no-trunc)
    [[ -n ${IMGS} ]] && docker rmi ${IMGS} || echo "no dangling images."
}
function docker-inspect-fn { docker inspect "$1"; }
function docker-ip-fn {
  echo "IP addresses of all named running containers"
  for DOC in $(docker-names-fn)
  do
    IP=$(docker inspect --format='{{ "{{" }}range .NetworkSettings.Networks{{ "}}" }}{{ "{{" }}.IPAddress{{ "}}" }} {{ "{{" }}end{{ "}}" }}' "$DOC")
    OUT+=$DOC'\t'$IP'\n'
  done
  echo -e "$OUT" | column -t
  unset OUT
}
function docker-logs-fn { docker logs -f "$1"; }
function docker-names-fn {
	for ID in $(docker ps | awk '{print $1}' | grep -v 'CONTAINER')
	do
    docker inspect "$ID" | grep Name | head -1 | awk '{print $2}' | sed 's/,//g' | sed 's%/%%g' | sed 's/"//g'
	done
}
function docker-network-rm-fn { docker network rm "$1"; }
function docker-pull-fn { docker pull "$1"; }
function docker-rm-exited-fn { docker rm "$(docker ps --all -q -f status=exited)"; }
function docker-run-fn { docker run -it "$1" "$2"; }
function docker-stop-rm-fn { docker stop "$1"; docker rm "$1"; }
function docker-volume-rm-fn { docker volume rm "$1"; }
function docker-volume-rm-dangling-fn {
    VOLS=$(docker volume ls --filter "dangling=true" -q)
    [[ -n ${VOLS} ]] && docker volume rm ${VOLS} || echo "no dangling volumes."
}

alias d=docker-fn
alias dcrme=docker-rm-exited-fn
alias dex=docker-exec-fn
alias di=docker-inspect-fn
alias dim='docker images | (sed -u 1q; sort)'
alias dip=docker-ip-fn
alias dirm=docker-image-rm-fn
alias dirmd=docker-image-rm-dangling-fn
alias dl=docker-logs-fn
alias dnames=docker-names-fn
alias dnls='docker network ls'
alias dnrm=docker-network-rm-fn
alias dps='docker ps'
alias dpsa='docker ps -a'
alias dpsf='docker ps -a --format "table {{ "{{" }}.ID{{ "}}" }}\t{{ "{{" }}.Image{{ "}}" }}\t{{ "{{" }}.Names{{ "}}" }}\t{{ "{{" }}.Status{{ "}}" }}"'
alias dpu=docker-pull-fn
alias drun=docker-run-fn
alias dsdf='docker system df -v'
alias dsp='docker system prune'
alias dspa='docker system prune --all'
alias dsr=docker-stop-rm-fn
alias dvls='docker volume ls'
alias dvrm=docker-volume-rm-fn
alias dvrmd=docker-volume-rm-dangling-fn

#==============================================================================#
#               ------- Functions & Aliases - Docker Compose ------            #
#==============================================================================#
function docker-compose-fn { docker compose "$@"; }
function docker-compose-run-fn { docker compose run "$@"; }

# Compose file
alias catco='cat compose.yaml'
alias vico='vim compose.yaml'

# CLI
alias dc=docker-compose-fn
alias dcd='docker compose down -v'
alias dcr='docker compose restart'
alias dcru=docker-compose-run-fn
alias dcsta='docker compose start'
alias dcsto='docker compose stop'
alias dcu='docker compose up -d'
alias dcub='docker compose up -d --build'

#==============================================================================#
#               ------- Functions & Aliases - Go ------                        #
#==============================================================================#
export GOPATH=/home/ubuntu/go
export PATH=${PATH}:/usr/local/go/bin:${GOPATH}/bin

#==============================================================================#
#               ------- Functions & Aliases - Helm ------                      #
#==============================================================================#

# Auto completion
source <(helm completion bash)

#==============================================================================#
#               ------- Functions & Aliases - Kubernetes ------                #
#==============================================================================#
export KUBE_EDITOR='code --wait'

# Auto completion
source <(kubectl completion bash)

# When using below aliases, print kubectl command and then execute it
function kctl() { echo "+ kubectl $@" && command kubectl $@ }

# Add aliases collection from https://github.com/ahmetb/kubectl-aliases
[ ! -f ~/.kube/aliases.sh ] && curl -fsSL "https://raw.githubusercontent.com/ahmetb/kubectl-aliases/master/.kubectl_aliases" > ~/.kube/aliases.sh && sed -i -e 's/kubectl/kctl/g' ~/.kube/aliases.sh
source ~/.kube/aliases.sh

function kctl-decode-secret-fn { kctl get secret "$1" -o=jsonpath='{.data}' | base64 --decode; echo; }
function kctl-delete-pod-fn { kctl delete pod "$1"; }
function kctl-describe-deployment-fn { kctl describe deployment "$1"; }
function kctl-describe-pod-fn { kctl describe pod "$1"; }
function kctl-edit-deployment-fn { kctl edit deployment "$1"; }
function kctl-edit-secret-fn { kctl edit secret "$1"; }
function kctl-get-secret-json-fn { kctl get secret "$1" -o jsonpath='{.data}'; }
function kctl-logs-fn { kctl logs -f "$1"; }
function kctl-port-forward-fn { kctl port-forward service/"$1" "$2":"$2"; }
function kctl-rollout-restart-deployment-fn { kctl rollout restart deployment "$2"; }

alias kdd=kctl-describe-deployment-fn
alias kdecs=kctl-decode-secret-fn
alias kdp=kctl-describe-pod-fn
alias ked=kctl-edit-deployment-fn
alias kes=kctl-edit-secret-fn
alias kgc='kctl config get-contexts'
alias kgd='kctl get deployment'
alias kgh='kctl get hpa'
alias kgi='kctl get ingress'
alias kgnr='kubectl get nodes --no-headers | awk "{print \$1}" | xargs -I {} sh -c "echo {} ; kubectl describe node {} | grep Allocated -A 5 | grep -ve Event -ve Allocated -ve percent -ve -- ; echo "'
alias kgp='kctl get pods'
alias kgpv='kctl get persistentvolume'
alias kgpvc='kctl get persistentvolumeclaim'
alias kgs='kctl get secret'
alias kgser='kctl get service'
alias kgsj=kctl-json-secret-fn
alias kgss='kctl get statefulset'
alias kgt='kctl --namespace kube-system describe secret eks-admin'
alias kh='cat ~/.zshrc | grep kctl'
alias kl=kctl-logs-fn
alias kn='kctl config set-context --current --namespace'
alias kp='kctl proxy'
alias kpf=kctl-port-forward-fn
alias krmfailed='kctl delete pods --field-selector=status.phase=Failed'
alias krmp=kctl-delete-pod-fn
alias krr=kctl-rollout-restart-deployment-fn

# homebrew - k9s
{{- if eq .machine "work-linux" }}
export PATH=${PATH}:/home/linuxbrew/.linuxbrew/bin
eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
{{- else }}
# export PATH=${PATH}:/home/linuxbrew/.linuxbrew/bin
# eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
{{- end }}

{{ if eq .machine "work-linux" -}}
{{ .product }}
{{- end }}

#==============================================================================#
#               ------- Functions & Aliases - Pulumi ------                    #
#==============================================================================#
export PATH=${PATH}:/${HOME}/.pulumi/bin

#==============================================================================#
#               ------- Functions & Aliases - Python ------                    #
#==============================================================================#
# pyenv
{{- if eq .machine "work-linux" }}
export PYENV_ROOT=${HOME}/.pyenv
export PATH=${PYENV_ROOT}/bin:${PATH}
if command -v pyenv 1>/dev/null 2>&1; then
 eval "$(pyenv init -)"
fi
eval "$(pyenv virtualenv-init -)"
{{- else }}
# export PYENV_ROOT=${HOME}/.pyenv
# export PATH=${PATH}:${PYENV_ROOT}/bin
# if command -v pyenv 1>/dev/null 2>&1; then
#  eval "$(pyenv init -)"
# fi
# eval "$(pyenv virtualenv-init -)"
{{- end }}

function venv-activate { pyenv activate "$1"; }
function venv-create-fn { pyenv virtualenv "$1" "$2"; }
function venv-delete-fn { pyenv virtualenv-delete "$1"; }
function venv-set-local-fn { pyenv local "$1"; }

# pip
alias pipfr='pip freeze --all > requirements.txt'
alias pipir='pip install -r requirements.txt'

# pyenv
alias pyh='cat ~/.zshrc | grep py'
alias pyl='pyenv versions'
alias pys='pyenv shell'
alias pysu='pyenv shell --unset'
alias pyv='pyenv version'

# pyenv virtualenvs
alias vc=venv-create-fn
alias vl='pyenv virtualenvs'
alias vloc=venv-set-local-fn
alias voff='pyenv deactivate'
alias vrm=venv-delete-fn

#==============================================================================#
#               ------- Functions & Aliases - Terraform ------                 #
#==============================================================================#
function terraform-fn { terraform "$@"; }
function terraform-state-fn { terraform state "$@"; }

# CLI
alias tf=terraform-fn
alias tfa='terraform apply'
alias tfaa='terraform apply --auto-approve'
alias tfd='terraform destroy'
alias tfi='terraform init'
alias tfo='terraform output'
alias tfp='terraform plan'
alias tfs=terraform-state-fn
alias tfsh='terraform show'
alias tfv='terraform validate'
