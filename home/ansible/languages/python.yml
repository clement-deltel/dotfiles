- name: Python
  hosts: all
  gather_facts: true
  vars_files:
    - ../vars/main.yml

  tasks:
  # -------------------------------------------------------------------------- #
  #               ------- Dependencies ------
  # -------------------------------------------------------------------------- #
  - name: Dependencies
    tags: [init, update]
    ansible.builtin.include_tasks:
      file: ../tasks/packages.yml
    vars:
      package_list: "{{ python_dependencies }}"
      package_type: "dependencies"

  # -------------------------------------------------------------------------- #
  #               ------- Packages ------
  # -------------------------------------------------------------------------- #
  - name: Packages
    tags: [init, update]
    ansible.builtin.include_tasks:
      file: ../tasks/packages.yml
    vars:
      package_list: "{{ python_packages }}"

  # -------------------------------------------------------------------------- #
  #               ------- PyPI - Packages ------
  # -------------------------------------------------------------------------- #
  - name: PyPI Packages
    block:

    - name: PyPI - Show packages
      tags: [init, update]
      ansible.builtin.debug:
        msg: "PyPI packages: {{ pip_packages }}"

    # pip install
    - name: PyPI - Install packages
      tags: init
      ansible.builtin.pip:
        name: "{{ pip_packages }}"
        state: present

    # pip install --upgrade
    - name: PyPI - Upgrade packages
      tags: update
      ansible.builtin.pip:
        name: "{{ pip_packages }}"
        state: latest

    # paramiko
    - name: PyPI - Install paramiko with minimum version
      tags: init
      ansible.builtin.pip:
        name: paramiko>3.5.1
        state: present

  # -------------------------------------------------------------------------- #
  #               ------- Pyenv - Dependencies ------
  # -------------------------------------------------------------------------- #
  - name: Pyenv - Dependencies
    tags: [init, update]
    ansible.builtin.include_tasks:
      file: ../tasks/packages.yml
    vars:
      package_list: "{{ pyenv_dependencies }}"
      package_type: "dependencies"

  # -------------------------------------------------------------------------- #
  #               ------- Pyenv - Install ------
  # -------------------------------------------------------------------------- #
  - name: pyenv - Install
    become_user: "{{ ansible_user_id }}"
    tags: init
    block:

    # curl https://pyenv.run | bash
    - name: pyenv - Download install script
      ansible.builtin.uri:
        method: GET
        url: "{{ pyenv_install_url }}"
        dest: "/tmp/pyenv.run"
        follow_redirects: safe
        mode: 0700

    - name: pyenv - Run install script
      ansible.builtin.shell:
        cmd: "/tmp/pyenv.run"
        executable: /usr/bin/zsh
      register: install_result
      changed_when: install_result.rc == 0

    - name: pyenv - Remove install script
      ansible.builtin.file:
        path: "/tmp/pyenv.run"
        state: absent

  # -------------------------------------------------------------------------- #
  #               ------- Pyenv - Upgrade ------
  # -------------------------------------------------------------------------- #
  - name: pyenv - Upgrade
    become_user: "{{ ansible_user_id }}"
    tags: update
    ansible.builtin.command:
      cmd: pyenv update
    register: upgrade_result
    changed_when: upgrade_result.rc == 0

  # -------------------------------------------------------------------------- #
  #               ------- Pyenv - Install Python ------
  # -------------------------------------------------------------------------- #
  - name: Pyenv - Install Python
    become_user: "{{ ansible_user_id }}"
    tags: init
    ansible.builtin.shell:
      cmd: pyenv install {{ pyenv_python_version }}
      executable: /usr/bin/zsh

  # -------------------------------------------------------------------------- #
  #               ------- pipx ------
  # -------------------------------------------------------------------------- #
  - name: pipx
    block:

    # sudo apt update -y && sudo apt install -y pipx
    - name: pipx - Install
      tags: init
      ansible.builtin.apt:
        name: pipx
        state: present
        update_cache: true

    # sudo apt update -y && sudo apt upgrade -y pipx
    - name: pipx - Upgrade
      tags: update
      ansible.builtin.apt:
        name: pipx
        state: latest
        update_cache: true

    # Version
    always:
    - name: pipx - Confirm version
      tags: [init, update]
      ansible.builtin.command:
        cmd: pipx --version
      register: version
      changed_when: false

    - name: pipx - Show version
      tags: [init, update]
      when: version is defined
      ansible.builtin.debug:
        msg: "Installed version: {{ version.stdout }}"

  # -------------------------------------------------------------------------- #
  #               ------- Poetry ------
  # -------------------------------------------------------------------------- #
  - name: Poetry
    become_user: "{{ ansible_user_id }}"
    block:

    # pipx install poetry
    - name: Poetry - Install
      tags: init
      community.general.pipx:
        name: poetry
        state: present

    # pipx upgrade poetry
    - name: Poetry - Upgrade
      tags: update
      community.general.pipx:
        name: poetry
        state: latest

    # Version
    always:
    - name: Poetry - Confirm version
      tags: [init, update]
      ansible.builtin.command:
        cmd: ~/.local/bin/poetry --version
      register: version
      changed_when: false

    - name: Poetry - Show version
      tags: [init, update]
      when: version is defined
      ansible.builtin.debug:
        msg: "Installed version: {{ version.stdout }}"

  # -------------------------------------------------------------------------- #
  #               ------- uv ------
  # -------------------------------------------------------------------------- #
  - name: uv
    block:

    # curl -fsSL https://astral.sh/uv/install.sh | sh
    - name: uv - Download install script
      tags: init
      ansible.builtin.uri:
        method: GET
        url: "{{ uv_install_url }}"
        dest: "/tmp/uv_install.sh"
        follow_redirects: safe
        mode: 0700

    - name: uv - Install
      tags: init
      ansible.builtin.command:
        cmd: /bin/sh -c /tmp/uv_install.sh
      register: install_result
      changed_when: install_result.rc == 0

    - name: uv - Remove install script
      tags: init
      ansible.builtin.file:
        path: "/tmp/uv_install.sh"
        state: absent

    # Upgrade
    - name: uv - Upgrade
      tags: update
      ansible.builtin.command:
        cmd: uv self update
      register: upgrade_result
      changed_when: upgrade_result.rc == 0

    # Version
    always:
    - name: uv - Confirm version
      tags: [init, update]
      ansible.builtin.command:
        cmd: uv --version
      register: version
      changed_when: false

    - name: uv - Show version
      tags: [init, update]
      when: version is defined
      ansible.builtin.debug:
        msg: "Installed version: {{ version.stdout }}"
