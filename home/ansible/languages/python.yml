- name: Python
  hosts: all
  gather_facts: false
  vars:
    packages:
      - python3
      - python3-pip
    pip_packages:
      - Pygments
    pyenv_dependencies:
      - libncursesw5-dev
      - libreadline-dev
      - libsqlite3-dev
      - zlib1g-dev
    pyenv_formulas:
      - pyenv
      - pyenv-virtualenv

  tasks:
  # Packages
  - name: Packages
    block:

    - name: List packages
      tags: [init, update]
      ansible.builtin.debug:
        msg: "packages: {{ packages }}"

    # sudo apt update -y && sudo apt install -y
    - name: Install
      tags: init
      ansible.builtin.apt:
        name: "{{ packages }}"
        state: present
        update_cache: true

    # sudo apt update -y && sudo apt upgrade -y
    - name: Upgrade
      tags: update
      ansible.builtin.apt:
        name: "{{ packages }}"
        state: latest
        update_cache: true

  # PyPI Packages
  - name: PyPI Packages
    block:

    - name: List packages
      tags: [init, update]
      ansible.builtin.debug:
        msg: "PyPI packages: {{ pip_packages }}"

    # pip install
    - name: PyPI - Install packages
      tags: init
      ansible.builtin.pip:
        name: "{{ pip_packages }}"
        state: present

    # pip install --upgrade
    - name: PyPI - Upgrade packages
      tags: update
      ansible.builtin.pip:
        name: "{{ pip_packages }}"
        state: latest


  # Pyenv - Dependencies
  - name: Pyenv - Dependencies
    block:

    - name: pyenv - List dependencies
      tags: [init, update]
      ansible.builtin.debug:
        msg: "dependencies: {{ pyenv_dependencies }}"

    # sudo apt update -y && sudo apt install -y
    - name: pyenv - Install dependencies
      tags: init
      ansible.builtin.apt:
        name: "{{ pyenv_dependencies }}"
        state: present
        update_cache: true

    # sudo apt update -y && sudo apt upgrade -y
    - name: pyenv - Upgrade dependencies
      tags: update
      ansible.builtin.apt:
        name: "{{ pyenv_dependencies }}"
        state: latest
        update_cache: true

  # Pyenv
  - name: Pyenv
    block:

    # brew install
    - name: pyenv - Install
      tags: init
      community.general.homebrew:
        name: "{{ pyenv_formulas }}"
        state: present
        update_homebrew: true

    # brew upgrade
    - name: pyenv - Upgrade
      tags: update
      community.general.homebrew:
        name: "{{ pyenv_formulas }}"
        state: latest
        update_homebrew: true

  # Pipx
  - name: Pipx
    block:

    # sudo apt update -y && sudo apt install -y pipx
    - name: pipx - Install
      tags: init
      ansible.builtin.apt:
        name: pipx
        state: present
        update_cache: true

    # sudo apt update -y && sudo apt upgrade -y pipx
    - name: pipx - Upgrade
      tags: update
      ansible.builtin.apt:
        name: pipx
        state: latest
        update_cache: true

    always:
    - name: pipx - Confirm version
      tags: [init, update]
      ansible.builtin.command:
        cmd: pipx --version
      register: version
      changed_when: false

    - name: pipx - Show version
      tags: [init, update]
      when: version is defined
      ansible.builtin.debug:
        msg: "Installed version: {{ version.stdout }}"

  # Commitizen
  - name: commitizen
    become_user: ubuntu
    block:

    # pipx install commitizen
    - name: Commitizen - Install
      tags: init
      community.general.pipx:
        name: commitizen
        state: present

    # pipx upgrade commitizen
    - name: Commitizen - Upgrade
      tags: update
      community.general.pipx:
        name: commitizen
        state: latest

    always:
    - name: Commitizen - Confirm version
      tags: [init, update]
      ansible.builtin.command:
        cmd: ~/.local/bin/cz version
      register: version
      changed_when: false

    - name: Commitizen - Show version
      tags: [init, update]
      when: version is defined
      ansible.builtin.debug:
        msg: "Installed version: {{ version.stdout }}"

  # Poetry
  - name: Poetry
    become_user: ubuntu
    block:

    # pipx install poetry
    - name: Poetry - Install
      tags: init
      community.general.pipx:
        name: poetry
        state: present

    # pipx upgrade poetry
    - name: Poetry - Upgrade
      tags: update
      community.general.pipx:
        name: poetry
        state: latest

    always:
    - name: Poetry - Confirm version
      tags: [init, update]
      ansible.builtin.command:
        cmd: ~/.local/bin/poetry --version
      register: version
      changed_when: false

    - name: Poetry - Show version
      tags: [init, update]
      when: version is defined
      ansible.builtin.debug:
        msg: "Installed version: {{ version.stdout }}"
