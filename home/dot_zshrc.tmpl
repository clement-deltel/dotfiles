# .zshrc
# Author: Clement Deltel <clement.deltel@proton.me>
# Source: https://github.com/clement-deltel/dotfiles/home/dot_zshrc.tmpl

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# If you come from bash you might have to change your $PATH.
export PATH=${PATH}:${HOME}/bin:${HOME}/.local/bin:/usr/local/bin

# Path to your Oh My Zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time Oh My Zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
# ZSH_THEME="robbyrussell"
# ZSH_THEME="agnoster"
ZSH_THEME="powerlevel10k/powerlevel10k"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
zstyle ':omz:update' frequency 7

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by Oh My Zsh libs,
# plugins, and themes. Aliases can be placed here, though Oh My Zsh
# users are encouraged to define aliases within a top-level file in
# the $ZSH_CUSTOM folder, with .zsh extension. Examples:
# - $ZSH_CUSTOM/aliases.zsh
# - $ZSH_CUSTOM/macos.zsh
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

#==============================================================================#
#               ------- Plugins --------                                       #
#==============================================================================#
# zsh-syntax-highlighting
# zsh-autosuggestions

#==============================================================================#
#               ------- chezmoi --------                                       #
#==============================================================================#
export EDITOR='code --wait'

function chezmoi-fn { chezmoi "$@"; }
function chezmoi-edit-fn { chezmoi edit "$1"; }
function chezmoi-add-fn { chezmoi add "$1"; }
function chezmoi-add-template-fn { chezmoi add --template "$1"; }

alias cm=chezmoi-fn
alias cma='chezmoi apply'
alias cmad=chezmoi-add-fn
alias cmadt=chezmoi-add-template-fn
alias cmcd='chezmoi cd'
alias cmd='chezmoi diff'
alias cme=chezmoi-edit-fn
alias cmo='code ~/.local/share/chezmoi'
alias cmtoml='code ~/.config/chezmoi/chezmoi.toml'

#==============================================================================#
#               ------- Functions ------                                       #
#==============================================================================#

# Print only column x of output
function col {
  awk -v col="$1" '{print $col}'
}

# Add extension $1 to all files without any extension in the current directory
function add-ext { find . -type f -not -name "*.*" -exec mv "{}" "{}"."$1" \;; }

# Create $2 copies of file $1
function cp-n { EXT="${1##*.}"; FILENAME="${1%.*}"; for i in $(seq 1 "$2"); do cp "$1" "${FILENAME}${i}.${EXT}"; done; }

# Execute $@ command in all the subdirectories
function exec-sub { find . -maxdepth 1 -mindepth 1 -type d -execdir echo {} \; -execdir $@ {} \; -execdir echo \;; }

# Make directory $1 and then cd inside
function mkcd { mkdir "$1"; cd "$1" || return; }

# Base64 decoding
function dec { echo "$1" | base64 --decode; }

# Host Info

# IP adresses
function my-ip(){
  MY_IP=$(/sbin/ifconfig eth0 | awk '/inet/ { print $2 } ' | sed -e s/addr://)
}

# Full summary
function ii() {
  echo -e "\nYou are logged on ${RED}$(hostname)"
  echo -e "\nAdditionnal information:$NC " ; uname -a
  echo -e "\n${RED}Users logged on:$NC " ; w -h
  echo -e "\n${RED}Current date :$NC " ; date
  echo -e "\n${RED}Machine stats :$NC " ; uptime
  echo -e "\n${RED}Memory stats :$NC " ; free
  my-ip 2>&- ;
  echo -e "\n${RED}Local IP Address :$NC" ; echo "${MY_IP:-"Not connected"}"
  echo
}

# Online cheatsheet
function cheatsheet { curl cheat.sh/"$1"; }

#==============================================================================#
#               ------- Aliases --------                                       #
#==============================================================================#

# Global
alias c='clear'
alias cls='clear'
alias d='date'
alias k='kill'
alias q='exit'
alias t='time'

# cd
alias home='cd ~'
alias ..='cd ..'
alias ...='cd ..; cd ..'
alias ....='cd ..; cd ..; cd ..'

# cp
alias cp='cp -i'

# du
alias du-sort='du -sh * | sort -h'

# env
alias env='clear && env | sort'

# exa
# if [ -x "$(command -v exa)" ]; then
#     alias ls="exa"
#     alias la="exa --long --all --group"
# fi

# grep
alias grep='grep --color=auto'

# history
alias h='clear && history | tail -50'

# ls
alias ll='ls -l --color=auto'
alias la='ls -Al --color=auto'
alias lah='ls -Ahl --color=auto'
alias lk='ls -lSr'          # sort by size
alias lr='ls -lR'           # recursive ls
alias ltr='ls -ltr'         # sort by date
alias lx='ls -lXB'          # sort by extension

# lsof - List open ports
alias lsop='lsof -i -n -P | grep LISTEN'

# mv
alias mv='mv -i'

# rm
alias rm='rm -i'

# su
alias root='sudo su -'
alias doc='sudo su - docker'

# tree
alias tree='tree -Csu'		# nice alternative to 'ls'

# vim
alias vimo='vim -o '

#==============================================================================#
#               ------- Aliases - Typos --------                               #
#==============================================================================#
alias :q='exit'

#==============================================================================#
#               ------- Aliases - Zsh --------                                 #
#==============================================================================#

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# zshrc
alias viz='vi ~/.zshrc'
alias srz='source ~/.zshrc'
alias caz='cat ~/.zshrc'

# plugins
alias lsp='ls -l ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/'

# colorls
if [ -x "$(command -v colorls)" ]; then
    alias ls="colorls"
    alias la="colorls -al"
fi

#==============================================================================#
#               ------- Aliases - AWS --------                                 #
#==============================================================================#
alias awslog='aws sso login'

#==============================================================================#
#               ------- Functions & Aliases - Python ------                    #
#==============================================================================#
# pyenv
{{- if eq .machine "work-linux" }}
export PYENV_ROOT=${HOME}/.pyenv
export PATH=${PYENV_ROOT}/bin:${PATH}
if command -v pyenv 1>/dev/null 2>&1; then
 eval "$(pyenv init -)"
fi
eval "$(pyenv virtualenv-init -)"
{{- else }}
# export PYENV_ROOT=${HOME}/.pyenv
# export PATH=${PATH}:${PYENV_ROOT}/bin
# if command -v pyenv 1>/dev/null 2>&1; then
#  eval "$(pyenv init -)"
# fi
# eval "$(pyenv virtualenv-init -)"
{{- end }}

function venv-create-fn { pyenv virtualenv "$1" "$2"; }
function venv-set-local-fn { pyenv local "$1"; }
function venv-activate { pyenv activate "$1"; }
function venv-delete-fn { pyenv virtualenv-delete "$1"; }

# pip
alias pipfr='pip freeze --all > requirements.txt'
alias pipir='pip install -r requirements.txt'

# pyenv
alias pyh='cat ~/.zshrc | grep py'
alias pyl='pyenv versions'
alias pys='pyenv shell'
alias pysu='pyenv shell --unset'
alias pyv='pyenv version'

# pyenv virtualenvs
alias vc=venv-create-fn
alias vl='pyenv virtualenvs'
alias vloc=venv-set-local-fn
alias voff='pyenv deactivate'
alias vrm=venv-delete-fn

#==============================================================================#
#               ------- Functions & Aliases - Docker ------                    #
#==============================================================================#
function docker-exec-fn { docker exec -it "$1" "${2:-bash}"; }
function docker-image-rm-fn { docker image rm "$1"; }
function docker-image-rm-dangling-fn {
    IMGS=$(docker images --filter "dangling=true" -q --no-trunc)
    [[ -n ${IMGS} ]] && docker rmi ${IMGS} || echo "no dangling images."
}
function docker-inspect-fn { docker inspect "$1"; }
function docker-ip-fn {
  echo "IP addresses of all named running containers"
  for DOC in $(docker-names-fn)
  do
    IP=$(docker inspect --format='{{ "{{" }}range .NetworkSettings.Networks{{ "}}" }}{{ "{{" }}.IPAddress{{ "}}" }} {{ "{{" }}end{{ "}}" }}' "$DOC")
    OUT+=$DOC'\t'$IP'\n'
  done
  echo -e "$OUT" | column -t
  unset OUT
}
function docker-logs-fn { docker logs -f "$1"; }
function docker-names-fn {
	for ID in $(docker ps | awk '{print $1}' | grep -v 'CONTAINER')
	do
    docker inspect "$ID" | grep Name | head -1 | awk '{print $2}' | sed 's/,//g' | sed 's%/%%g' | sed 's/"//g'
	done
}
function docker-network-rm-fn { docker network rm "$1"; }
function docker-pull-fn { docker pull "$1"; }
function docker-rm-exited-fn { docker rm "$(docker ps --all -q -f status=exited)"; }
function docker-run-fn { docker run -it "$1" "$2"; }
function docker-stop-rm-fn { docker stop "$1"; docker rm "$1"; }
function docker-volume-rm-fn { docker volume rm "$1"; }
function docker-volume-rm-dangling-fn {
    VOLS=$(docker volume ls --filter "dangling=true" -q)
    [[ -n ${VOLS} ]] && docker volume rm ${VOLS} || echo "no dangling volumes."
}

alias dcrme=docker-rm-exited-fn
alias dex=docker-exec-fn
alias di=docker-inspect-fn
alias dim='docker images | (sed -u 1q; sort)'
alias dirm=docker-image-rm-fn
alias dirmd=docker-image-rm-dangling-fn
alias dip=docker-ip-fn
alias dl=docker-logs-fn
alias dnames=docker-names-fn
alias dnls='docker network ls'
alias dnrm=docker-network-rm-fn
alias dps='docker ps'
alias dpsa='docker ps -a'
alias dpsf='docker ps -a --format "table {{ "{{" }}.ID{{ "}}" }}\t{{ "{{" }}.Image{{ "}}" }}\t{{ "{{" }}.Names{{ "}}" }}\t{{ "{{" }}.Status{{ "}}" }}"'
alias dpu=docker-pull-fn
alias drun=docker-run-fn
alias dsdf='docker system df -v'
alias dsp='docker system prune'
alias dspa='docker system prune --all'
alias dsr=docker-stop-rm-fn
alias dvls='docker volume ls'
alias dvrm=docker-volume-rm-fn
alias dvrmd=docker-volume-rm-dangling-fn

#==============================================================================#
#               ------- Functions & Aliases - Docker Compose ------            #
#==============================================================================#
function docker-compose-fn { docker compose "$@"; }
function docker-compose-run-fn { docker compose run "$@"; }

# Compose file
alias catco='cat compose.yaml'
alias vico='vim compose.yaml'

# CLI
alias dc=docker-compose-fn
alias dcd='docker compose down -v'
alias dcru=docker-compose-run-fn
alias dcu='docker compose up -d'
alias dcub='docker compose up -d --build'
alias dcr='docker compose restart'
alias dcsta='docker compose start'
alias dcsto='docker compose stop'

#==============================================================================#
#               ------- Functions & Aliases - Kubernetes ------                #
#==============================================================================#
export KUBE_EDITOR='code --wait'

function kubectl-delete-pod-fn { kubectl delete pod "$1"; }
function kubectl-decode-secret-fn { kubectl get secret "$1" -o=jsonpath='{.data}' | base64 --decode; echo; }
function kubectl-describe-deployment-fn { kubectl describe deployment "$1"; }
function kubectl-describe-pod-fn { kubectl describe pod "$1"; }
function kubectl-edit-deployment-fn { kubectl edit deployment "$1"; }
function kubectl-edit-secret-fn { kubectl edit secret "$1"; }
function kubectl-exec-fn { kubectl exec --stdin --tty "$1" -- "${2:-bash}"; }
function kubectl-json-secret-fn { kubectl get secret "$1" -o jsonpath='{.data}'; }
function kubectl-logs-fn { kubectl logs -f "$1"; }
function kubectl-port-forward-fn { kubectl port-forward service/"$1" "$2":"$2"; }
function kubectl-rollout-restart-deployment-fn { kubectl rollout restart deployment -n default "$1"; }

alias kcgc='kubectl config get-contexts'
alias kdd=kubectl-describe-deployment-fn
alias kdelp=kubectl-delete-pod-fn
alias kdp=kubectl-describe-pod-fn
alias kdsec=kubectl-decode-secret-fn
alias ked=kubectl-edit-deployment-fn
alias kesec=kubectl-edit-secret-fn
alias kex=kubectl-exec-fn
alias kgd='kubectl get deployment'
alias kgh='kubectl get hpa'
alias kgt='kubectl -n kube-system describe secret eks-admin'
alias kh='cat ~/.zshrc | grep kubectl'
alias kgi='kubectl get ingress'
alias kjsec=kubectl-json-secret-fn
alias kl=kubectl-logs-fn
alias klw=kubectl-logs-workers-fn
alias kgp='kubectl get pods'
alias kgpv='kubectl get persistentvolume'
alias kgpvc='kubectl get persistentvolumeclaim'
alias kgs='kubectl get service'
alias kgsec='kubectl get secret'
alias kgss='kubectl get statefulset'
alias kp='kubectl proxy'
alias kpf=kubectl-port-forward-fn
alias krr=kubectl-rollout-restart-deployment-fn

#HomeBrew - k9s
{{- if eq .machine "work-linux" }}
export PATH=${PATH}:/home/linuxbrew/.linuxbrew/bin
eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
{{- else }}
# export PATH=${PATH}:/home/linuxbrew/.linuxbrew/bin
# eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
{{- end }}

{{ if eq .machine "work-linux" -}}
{{ .product }}
{{- end }}
